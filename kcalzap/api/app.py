from flask import Flask, request, jsonify, render_template
from dotenv import load_dotenv
import os
import openai
from twilio.rest import Client
import stripe
from datetime import datetime
import sqlite3
from pathlib import Path
import requests
from io import BytesIO
from PIL import Image
import base64

# Carrega vari√°veis de ambiente
load_dotenv()

# Configura√ß√£o das APIs
openai.api_key = os.getenv('OPENAI_API_KEY')
twilio_client = Client(os.getenv('TWILIO_SID'), os.getenv('TWILIO_TOKEN'))
stripe.api_key = os.getenv('STRIPE_SECRET_KEY')

app = Flask(__name__)

# Configura√ß√£o do banco de dados
def get_db():
    db = sqlite3.connect('kcalzap.db')
    db.row_factory = sqlite3.Row
    return db

def init_db():
    db = get_db()
    with app.open_resource('schema.sql', mode='r') as f:
        db.cursor().executescript(f.read())
    db.commit()

def get_or_create_user(telefone):
    db = get_db()
    cursor = db.cursor()
    
    # Tenta encontrar o usu√°rio
    cursor.execute('SELECT * FROM usuarios WHERE telefone = ?', (telefone,))
    user = cursor.fetchone()
    
    if user is None:
        # Cria novo usu√°rio se n√£o existir
        cursor.execute('''
            INSERT INTO usuarios (telefone, meta_calorias, analises_restantes)
            VALUES (?, 2000, 5)
        ''', (telefone,))
        db.commit()
        
        cursor.execute('SELECT * FROM usuarios WHERE telefone = ?', (telefone,))
        user = cursor.fetchone()
    
    return dict(user)

def analisar_imagem_com_gpt4(image_url):
    try:
        # Baixa a imagem
        response = requests.get(image_url)
        img = Image.open(BytesIO(response.content))
        
        # Converte a imagem para base64
        buffered = BytesIO()
        img.save(buffered, format="JPEG")
        img_str = base64.b64encode(buffered.getvalue()).decode()
        
        # Faz a an√°lise com GPT-4 Vision
        response = openai.chat.completions.create(
            model="gpt-4-vision-preview",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": "Analise esta imagem de refei√ß√£o e forne√ßa as seguintes informa√ß√µes em formato JSON:\n"
                                  "1. Descri√ß√£o breve da refei√ß√£o\n"
                                  "2. Calorias totais estimadas\n"
                                  "3. Gramas de carboidratos\n"
                                  "4. Gramas de prote√≠nas\n"
                                  "5. Gramas de gorduras"
                        },
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{img_str}"
                            }
                        }
                    ]
                }
            ],
            max_tokens=500
        )
        
        # Extrai a resposta do GPT-4
        analise = response.choices[0].message.content
        return analise
    except Exception as e:
        print(f"Erro ao analisar imagem: {e}")
        return None

def salvar_refeicao(user_id, foto_url, analise):
    try:
        db = get_db()
        cursor = db.cursor()
        
        cursor.execute('''
            INSERT INTO refeicoes (usuario_id, foto_url, descricao, calorias, carboidratos, proteinas, gorduras)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (user_id, foto_url, analise['descricao'], analise['calorias'], 
              analise['carboidratos'], analise['proteinas'], analise['gorduras']))
        
        db.commit()
        return True
    except Exception as e:
        print(f"Erro ao salvar refei√ß√£o: {e}")
        return False

def atualizar_analises_restantes(user_id):
    db = get_db()
    cursor = db.cursor()
    
    cursor.execute('''
        UPDATE usuarios 
        SET analises_restantes = analises_restantes - 1 
        WHERE id = ? AND analises_restantes > 0
    ''', (user_id,))
    
    db.commit()
    return cursor.rowcount > 0

# Rotas principais
@app.route('/')
def index():
    # Dados mockados para teste inicial
    dados = {
        'calorias_hoje': 0,
        'meta_calorias': 2000,
        'horas_jejum': 0,
        'meta_jejum': 16,
        'analises_restantes': 5,
        'plano': 'gratuito',
        'carboidratos': 0,
        'proteinas': 0,
        'gorduras': 0,
        'ultimas_refeicoes': []
    }
    return render_template('visao_geral.html', **dados)

@app.route('/categorias')
def categorias():
    return render_template('categorias.html')

@app.route('/ultimas-refeicoes')
def ultimas_refeicoes():
    return render_template('ultimas_refeicoes.html')

# Webhook do WhatsApp (Twilio)
@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        message = request.form.get('Body', '').lower()
        media_url = request.form.get('MediaUrl0', '')
        from_number = request.form.get('From', '')
        
        # Obt√©m ou cria usu√°rio
        user = get_or_create_user(from_number)
        
        # Se recebeu uma imagem
        if media_url:
            # Verifica se usu√°rio tem an√°lises dispon√≠veis
            if user['plano'] == 'gratuito' and user['analises_restantes'] <= 0:
                resposta = ("Voc√™ atingiu o limite de an√°lises gratuitas. "
                          "Fa√ßa upgrade para o plano premium para an√°lises ilimitadas: "
                          "https://seu-site.com/subscribe")
            else:
                # Analisa a imagem
                analise = analisar_imagem_com_gpt4(media_url)
                if analise:
                    # Salva a refei√ß√£o
                    if salvar_refeicao(user['id'], media_url, analise):
                        # Atualiza contagem de an√°lises restantes para usu√°rios gratuitos
                        if user['plano'] == 'gratuito':
                            atualizar_analises_restantes(user['id'])
                        
                        resposta = (f"An√°lise da sua refei√ß√£o:\n\n"
                                  f"üçΩ {analise['descricao']}\n"
                                  f"üìä Calorias: {analise['calorias']}kcal\n"
                                  f"ü•ñ Carboidratos: {analise['carboidratos']}g\n"
                                  f"ü•© Prote√≠nas: {analise['proteinas']}g\n"
                                  f"ü•ë Gorduras: {analise['gorduras']}g")
                    else:
                        resposta = "Desculpe, ocorreu um erro ao salvar sua refei√ß√£o."
                else:
                    resposta = "Desculpe, n√£o consegui analisar esta imagem. Tente enviar outra foto."
        
        # Se recebeu uma mensagem de texto
        elif message:
            if 'oi' in message or 'ol√°' in message:
                resposta = ("Ol√°! Bem-vindo ao KcalZap! üì±\n\n"
                          "Envie uma foto da sua refei√ß√£o para eu analisar as calorias e nutrientes! üì∏\n\n"
                          "Voc√™ tamb√©m pode:\n"
                          "- Digite 'status' para ver seu progresso\n"
                          "- Digite 'ajuda' para ver todos os comandos\n"
                          "- Digite 'premium' para conhecer nosso plano premium")
            
            elif message == 'status':
                resposta = (f"Seu Status:\n\n"
                          f"üìä Plano: {user['plano'].title()}\n"
                          f"üéØ Meta de calorias: {user['meta_calorias']}kcal\n"
                          f"üì∏ An√°lises restantes: {user['analises_restantes'] if user['plano'] == 'gratuito' else 'Ilimitadas'}")
            
            elif message == 'ajuda':
                resposta = ("Comandos dispon√≠veis:\n\n"
                          "üì∏ Envie uma foto para an√°lise\n"
                          "üìä 'status' - Ver seu progresso\n"
                          "üíé 'premium' - Conhecer plano premium\n"
                          "üéØ 'meta XXX' - Definir meta de calorias\n"
                          "‚ùì 'ajuda' - Ver esta mensagem")
            
            elif message == 'premium':
                resposta = ("üåü Plano Premium KcalZap:\n\n"
                          "‚ú® An√°lises ilimitadas de refei√ß√µes\n"
                          "üìä Relat√≥rios detalhados\n"
                          "üéØ Sugest√µes personalizadas\n"
                          "üí™ Suporte priorit√°rio\n\n"
                          "Apenas R$19,90/m√™s!\n"
                          "Acesse: https://seu-site.com/subscribe")
            
            elif message.startswith('meta '):
                try:
                    nova_meta = int(message.split('meta ')[1])
                    if 1000 <= nova_meta <= 5000:
                        db = get_db()
                        cursor = db.cursor()
                        cursor.execute('UPDATE usuarios SET meta_calorias = ? WHERE id = ?', 
                                     (nova_meta, user['id']))
                        db.commit()
                        resposta = f"‚úÖ Meta atualizada para {nova_meta} calorias!"
                    else:
                        resposta = "‚ùå Por favor, defina uma meta entre 1000 e 5000 calorias."
                except ValueError:
                    resposta = "‚ùå Formato inv√°lido. Use 'meta XXX' onde XXX √© o n√∫mero de calorias."
            
            else:
                resposta = ("N√£o entendi. Envie uma foto da sua refei√ß√£o ou digite 'ajuda' "
                          "para ver os comandos dispon√≠veis.")
        
        else:
            resposta = "Por favor, envie uma foto da sua refei√ß√£o ou digite 'ajuda' para ver os comandos dispon√≠veis."
        
        # Envia resposta via Twilio
        twilio_client.messages.create(
            body=resposta,
            from_='whatsapp:+14155238886',  # Substitua pelo n√∫mero do Sandbox do Twilio
            to=from_number
        )
        
        return '', 204
        
    except Exception as e:
        print(f"Erro no webhook: {e}")
        return '', 500

# Rotas da API
@app.route('/api/analisar-foto', methods=['POST'])
def analisar_foto():
    # TODO: Implementar an√°lise de fotos com OpenAI
    pass

@app.route('/api/sugerir-jejum', methods=['POST'])
def sugerir_jejum():
    # TODO: Implementar sugest√µes de jejum
    pass

# Rotas de pagamento
@app.route('/subscribe')
def subscribe():
    return render_template('subscribe.html')

@app.route('/webhook-stripe', methods=['POST'])
def webhook_stripe():
    # TODO: Implementar webhook do Stripe
    pass

if __name__ == '__main__':
    # Verifica se o banco de dados existe
    if not Path('kcalzap.db').exists():
        init_db()
    app.run(debug=True)
